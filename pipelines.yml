template: true   # required for local templates
valuesFilePath: ./values.yml

resources:
  - name: {{ .Values.gitRepo.name }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.gitRepo.provider }}
      path: {{ .Values.gitRepo.path }}
      # branches:
      #   include: master

  - name: {{ .Values.pipelines.name }}
    type: PropertyBag
    configuration:
      commitSha: 1
      runID: 1

pipelines:
  - name: "{{ .Values.pipelines.name }}_1"
    steps:
      - name: bash_1
        type: Bash
        configuration:
          inputResources:
            - name: {{ .Values.gitRepo.name }}
        execution:
          onExecute:
            # Data from input resources is available as env variables in the step
            - echo ${res_{{ .Values.gitRepo.name }}_commitSha}
            # The next two commands add variables to run state, which is available to all downstream steps in this run
            # Run state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-RunState
            - add_run_variables current_runid=$run_id
            - add_run_variables commitSha=${res_{{ .Values.gitRepo.name }}_commitSha}
            # This variable is written to pipeline state in bash_3.
            # So this will be empty during first run and will be set to prior run number in subsequent runs
            # Pipeline state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-PipelineState
            - echo "Previous run ID is $prev_runid"
            - echo "Current run ID is $current_runid"
            

      - name: bash_2
        type: Bash
        configuration:
          inputSteps:
            - name: bash_1
        execution:
          onExecute:
            # Demonstrates the availability of an env variable written to run state during bash_1
            - echo $current_runid

      - name: bash_3
        type: Bash
        configuration:
          inputSteps:
            - name: bash_2
          outputResources:
            - name: {{ .Values.pipelines.name }}
        execution:
          onExecute:
            - echo $current_runid
            # Writes current run number to pipeline state
            - add_pipeline_variables prev_runid=$run_id
            # Uses an utility function to update the output resource with the commitSha that triggered this run
            # Dependent pipelines can be configured to trigger when this resource is updated
            # Utility functions documentation: https://www.jfrog.com/confluence/display/JFROG/Pipelines+Utility+Functions
            - write_output {{ .Values.pipelines.name }} commitSha=$commitSha runID=$current_runid

  - name: "{{ .Values.pipelines.name }}_2"
    steps:
      - name: bash
        type: Bash
        configuration:
          inputResources:
            # Sets up step to be triggered when myPropertyBag is updated
            - name: {{ .Values.pipelines.name }}
        execution:
          onExecute:
            # Retrieves the commitSha from input resource
            - echo "CommitSha is ${res_{{ .Values.pipelines.name }}_commitSha}"
